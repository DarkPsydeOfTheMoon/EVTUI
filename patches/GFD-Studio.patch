diff --git a/GFDLibrary.Rendering.OpenGL/ConversionHelper.cs b/GFDLibrary.Rendering.OpenGL/ConversionHelper.cs
index bbb6e2f..883e98e 100644
--- a/GFDLibrary.Rendering.OpenGL/ConversionHelper.cs
+++ b/GFDLibrary.Rendering.OpenGL/ConversionHelper.cs
@@ -1,4 +1,4 @@
-﻿using OpenTK;
+﻿using OpenTK.Mathematics;
 
 namespace GFDLibrary.Rendering.OpenGL
 {
diff --git a/GFDLibrary.Rendering.OpenGL/GFDLibrary.Rendering.OpenGL.csproj b/GFDLibrary.Rendering.OpenGL/GFDLibrary.Rendering.OpenGL.csproj
index 02c4f29..9cbbf8a 100644
--- a/GFDLibrary.Rendering.OpenGL/GFDLibrary.Rendering.OpenGL.csproj
+++ b/GFDLibrary.Rendering.OpenGL/GFDLibrary.Rendering.OpenGL.csproj
@@ -1,7 +1,7 @@
 ﻿<Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFramework>net6.0-windows</TargetFramework>
+    <TargetFramework>net6.0</TargetFramework>
     <Version>0.10.2</Version>
   </PropertyGroup>
 
@@ -14,7 +14,7 @@
   </PropertyGroup>
 
   <ItemGroup>
-    <PackageReference Include="OpenTK" Version="3.1.0" />
+    <PackageReference Include="OpenTK" Version="4.1.0" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/GFDLibrary.Rendering.OpenGL/GLCamera.cs b/GFDLibrary.Rendering.OpenGL/GLCamera.cs
index d02daac..728e647 100644
--- a/GFDLibrary.Rendering.OpenGL/GLCamera.cs
+++ b/GFDLibrary.Rendering.OpenGL/GLCamera.cs
@@ -1,4 +1,4 @@
-﻿using OpenTK;
+﻿using OpenTK.Mathematics;
 
 namespace GFDLibrary.Rendering.OpenGL
 {
diff --git a/GFDLibrary.Rendering.OpenGL/GLMaterial.cs b/GFDLibrary.Rendering.OpenGL/GLMaterial.cs
index 232e40e..4d1a882 100644
--- a/GFDLibrary.Rendering.OpenGL/GLMaterial.cs
+++ b/GFDLibrary.Rendering.OpenGL/GLMaterial.cs
@@ -2,7 +2,7 @@
 using System.Linq;
 using System.Reflection;
 using GFDLibrary.Materials;
-using OpenTK;
+using OpenTK.Mathematics;
 using OpenTK.Graphics.OpenGL;
 
 namespace GFDLibrary.Rendering.OpenGL
@@ -356,4 +356,4 @@ namespace GFDLibrary.Rendering.OpenGL
         }
         public override bool IsMaterialTransparent() => ParameterSet.IsMaterialTransparent();
     }
-}
\ No newline at end of file
+}
diff --git a/GFDLibrary.Rendering.OpenGL/GLMesh.cs b/GFDLibrary.Rendering.OpenGL/GLMesh.cs
index d535d24..6b3072e 100644
--- a/GFDLibrary.Rendering.OpenGL/GLMesh.cs
+++ b/GFDLibrary.Rendering.OpenGL/GLMesh.cs
@@ -3,7 +3,7 @@ using System.Collections.Generic;
 using System.Diagnostics;
 using System.Numerics;
 using GFDLibrary.Models;
-using OpenTK;
+using OpenTK.Mathematics;
 using OpenTK.Graphics.OpenGL;
 using Vector3 = System.Numerics.Vector3;
 
@@ -150,4 +150,4 @@ namespace GFDLibrary.Rendering.OpenGL
         }
         #endregion
     }
-}
\ No newline at end of file
+}
diff --git a/GFDLibrary.Rendering.OpenGL/GLModel.cs b/GFDLibrary.Rendering.OpenGL/GLModel.cs
index daee18f..c9fb129 100644
--- a/GFDLibrary.Rendering.OpenGL/GLModel.cs
+++ b/GFDLibrary.Rendering.OpenGL/GLModel.cs
@@ -6,7 +6,7 @@ using System.Numerics;
 using GFDLibrary.Animations;
 using GFDLibrary.Materials;
 using GFDLibrary.Models;
-using OpenTK;
+using OpenTK.Mathematics;
 using OpenTK.Graphics.OpenGL;
 using Quaternion = System.Numerics.Quaternion;
 using Vector3 = System.Numerics.Vector3;
@@ -22,6 +22,7 @@ namespace GFDLibrary.Rendering.OpenGL
         public Dictionary<string, GLBaseMaterial> Materials { get; }
 
         public Animation Animation { get; private set; }
+        public Dictionary<int, Animation> BlendAnimations { get; }
 
         public GLModel( ModelPack modelPack, MaterialTextureCreator textureCreator )
         {
@@ -48,6 +49,79 @@ namespace GFDLibrary.Rendering.OpenGL
                     glNode.Meshes.Add( glMesh );
                 }
             }
+
+            BlendAnimations = new Dictionary<int, Animation>();
+        }
+
+        public Vector3 QuatToEuler( Quaternion q )
+        {
+            Vector3 res = new Vector3(0, 0, 0);
+
+            var a = q.W - q.Y;
+            var b = q.Z + q.X;
+            var c = q.W + q.Y;
+            var d = q.Z - q.X;
+
+            res.Y = (float)(2 * System.Math.Atan2(System.Math.Sqrt(c * c + d * d), System.Math.Sqrt(a * a + b * b)));
+
+            var t0 = (float)System.Math.Atan2(b, a);
+            var t1 = (float)System.Math.Atan2(d, c);
+
+            if (System.Math.Abs(res.Y) < 1e-6)
+            {
+                res.X = 2 * t0;
+                res.Z = 0;
+            }
+            else if (System.Math.Abs(res.Y - System.Math.PI) < 1e-6)
+            {
+                res.X = -2 * t1;
+                res.Z = 0;
+            }
+            else
+            {
+                res.X = t0 - t1;
+                res.Z = t0 + t1;
+            }
+
+            res.Y -= (float)(System.Math.PI / 2);
+
+            float ClampPi(float val)
+            {
+                if      (val < -System.Math.PI) return (float)(val + 2 * System.Math.PI);
+                else if (val > +System.Math.PI) return (float)(val - 2 * System.Math.PI);
+                else                            return val;
+            }
+
+            res.X = ClampPi(res.X);
+            res.Y = ClampPi(res.Y);
+            res.Z = ClampPi(res.Z);
+            return res;
+        }
+
+        Quaternion EulerToQuat( Vector3 e )
+        {
+            var x = e.X / 2;
+            var y = e.Y / 2;
+            var z = e.Z / 2;
+
+            double cx = System.Math.Cos(x);
+            double sx = System.Math.Sin(x);
+            double cy = System.Math.Cos(y);
+            double sy = System.Math.Sin(y);
+            double cz = System.Math.Cos(z);
+            double sz = System.Math.Sin(z);
+
+            return new Quaternion(
+                (float)(sx * cy * cz - cx * sy * sz),
+                (float)(cx * sy * cz + sx * cy * sz),
+                (float)(cx * cy * sz - sx * sy * cz),
+                (float)(cx * cy * cz + sx * sy * sz)
+            );
+        }
+
+        bool NoActiveAnimations()
+        {
+            return (Animation == null) && (BlendAnimations.Count() == 0);
         }
 
         public void LoadAnimation( Animation animation )
@@ -94,6 +168,47 @@ namespace GFDLibrary.Rendering.OpenGL
             }
         }
 
+        public void LoadBlendAnimation( Animation animation, int index=-1 )
+        {
+            if (index < 0) { index = BlendAnimations.Count(); }
+            BlendAnimations[index] = animation;
+
+            foreach ( var glNode in Nodes )
+            {
+                int nodeControllerIndex = glNode.BlendControllerIndices.IndexOf( index );
+                List<AnimationController>? controller = null;
+                if (nodeControllerIndex == -1)
+                {
+                    glNode.BlendControllers.Add( new List<AnimationController>() );
+                    controller = glNode.BlendControllers.Last();
+                }
+                else
+                {
+                    controller = glNode.BlendControllers[nodeControllerIndex];
+                    controller.Clear();
+                }
+
+                glNode.BlendControllerIndices.Add(index);
+                controller.AddRange( animation.Controllers.Where( x => x.TargetKind == TargetKind.Node &&
+                                                                  x.TargetName == glNode.Node.Name ) );
+            }
+        }
+
+        public void UnloadBlendAnimation( int index )
+        {
+            BlendAnimations.Remove( index );
+
+            foreach ( var glNode in Nodes )
+            {
+                int nodeControllerIndex = glNode.BlendControllerIndices.IndexOf( index );
+                if ( nodeControllerIndex != -1 )
+                {
+                    glNode.BlendControllerIndices.RemoveAt( nodeControllerIndex );
+                    glNode.BlendControllers.RemoveAt( nodeControllerIndex );
+                }
+            }
+        }
+
         private GLShaderProgram GetTargetShader(ShaderRegistry shaderRegistry, GLMesh glMesh, Matrix4 view, Matrix4 projection, HashSet<ResourceType> shaderPrograms )
         {
             if ( typeof( GLMetaphorMaterial ).IsInstanceOfType( glMesh.Material )
@@ -117,7 +232,7 @@ namespace GFDLibrary.Rendering.OpenGL
 
         public void Draw( DrawContext context )
         {
-            if ( Animation != null )
+            if ( !NoActiveAnimations() )
                 AnimateNodes( context.AnimationTime );
             context.ShaderRegistry.mDefaultShader.Use();
             context.ShaderRegistry.mDefaultShader.SetUniform( "uView", context.Camera.View );
@@ -138,7 +253,7 @@ namespace GFDLibrary.Rendering.OpenGL
                 {
                     var glMesh = glNode.Meshes[i];
 
-                    if ( Animation != null && glMesh.Mesh != null )
+                    if ( !NoActiveAnimations() && glMesh.Mesh != null )
                     {
                         var oldGlMesh = glMesh;
                         glMesh = glNode.Meshes[i] = new GLMesh( oldGlMesh.Mesh, glNode.WorldTransform, ModelPack.Model.Bones, Nodes, Materials );
@@ -162,7 +277,7 @@ namespace GFDLibrary.Rendering.OpenGL
             GL.Enable( EnableCap.Blend );
 
             // Sort transparent objects based on their distance from the camera
-            transparentMeshes.Sort( ( a, b ) => OpenTK.Vector3.Distance( context.Camera.Translation, b.Item2.ExtractTranslation() ).CompareTo( OpenTK.Vector3.Distance( context.Camera.Translation, a.Item2.ExtractTranslation() ) ) );
+            transparentMeshes.Sort( ( a, b ) => OpenTK.Mathematics.Vector3.Distance( context.Camera.Translation, b.Item2.ExtractTranslation() ).CompareTo( OpenTK.Mathematics.Vector3.Distance( context.Camera.Translation, a.Item2.ExtractTranslation() ) ) );
 
             // Disable depth mask
             GL.DepthMask( false );
@@ -197,59 +312,79 @@ namespace GFDLibrary.Rendering.OpenGL
         }
 
 
-        private void AnimateNodes( double animationTime )
+        private void FetchNodeAnimation( List<AnimationController> controllers, double animationTime, ref Quaternion rotation, ref Vector3 translation, ref Vector3 scale )
         {
-            foreach ( var glNode in Nodes )
+            foreach ( var controller in controllers )
             {
-                var rotation    = glNode.Node.Rotation;
-                var translation = glNode.Node.Translation;
-                var scale       = glNode.Node.Scale;
-
-                foreach ( var controller in glNode.Controllers )
+                foreach ( var layer in controller.Layers )
                 {
-                    foreach ( var layer in controller.Layers )
+                    Key curKey = null;
+                    Key nextKey = null;
+
+                    if ( controller != null )
                     {
-                        Key curKey = null;
-                        Key nextKey = null;
+                        (curKey, nextKey) = GetCurrentAndNextKeys( layer, animationTime );
+                    }
 
-                        if ( controller != null )
+                    if ( controller != null && curKey != null )
+                    {
+                        if ( layer.HasPRSKeyFrames )
                         {
-                            (curKey, nextKey) = GetCurrentAndNextKeys( layer, animationTime );
-                        }
+                            var prsKey = ( PRSKey )curKey;
+                            var nextPrsKey = ( PRSKey )nextKey;
 
-                        if ( controller != null && curKey != null )
-                        {
-                            if ( layer.HasPRSKeyFrames )
+                            if ( nextPrsKey != null )
                             {
-                                var prsKey = ( PRSKey )curKey;
-                                var nextPrsKey = ( PRSKey )nextKey;
-
-                                if ( nextPrsKey != null )
-                                {
-                                    InterpolateKeys( animationTime, layer, ref rotation, ref translation, ref scale, prsKey, nextPrsKey );
-                                }
-                                else
-                                {
-                                    if ( prsKey.HasRotation )
-                                        rotation = prsKey.Rotation;
-
-                                    if ( prsKey.HasPosition )
-                                        translation = prsKey.Position * layer.PositionScale;
-
-                                    if ( prsKey.HasScale )
-                                        scale = prsKey.Scale * layer.ScaleScale;
-                                }
+                                InterpolateKeys( animationTime, layer, ref rotation, ref translation, ref scale, prsKey, nextPrsKey );
                             }
                             else
                             {
-                                //Debugger.Break();
+                                if ( prsKey.HasRotation )
+                                    rotation = prsKey.Rotation;
+
+                                if ( prsKey.HasPosition )
+                                    translation = prsKey.Position * layer.PositionScale;
+
+                                if ( prsKey.HasScale )
+                                    scale = prsKey.Scale * layer.ScaleScale;
                             }
                         }
+                        else
+                        {
+                            //Debugger.Break();
+                        }
                     }
                 }
+            }
+        }
+
+        private void AnimateNodes( double animationTime )
+        {
+            foreach ( var glNode in Nodes )
+            {
+                var rotation = glNode.Node.Rotation;
+                var translation = glNode.Node.Translation;
+                var scale = glNode.Node.Scale;
+                FetchNodeAnimation( glNode.Controllers, animationTime, ref rotation, ref translation, ref scale );
+                var rotationEuler = QuatToEuler( rotation );
+                var bkp_rotation = rotation;
+
+                foreach ( var blendControllers in glNode.BlendControllers )
+                {
+                    Quaternion blendRotation = new Quaternion(0, 0, 0, 1);
+                    Vector3 blendTranslation = new Vector3(0, 0, 0);
+                    Vector3 blendScale = new Vector3(0, 0, 0);
+                    FetchNodeAnimation( blendControllers, animationTime, ref blendRotation, ref blendTranslation, ref blendScale );
+                    var blendRotationEuler = QuatToEuler( blendRotation );
+
+                    rotationEuler += blendRotationEuler;
+                    translation   += blendTranslation;
+                    scale         += blendScale;
+                }
+                rotation = EulerToQuat( rotationEuler );
 
                 // Calculate current transform
-                var transform = Matrix4x4.CreateFromQuaternion( rotation ) * Matrix4x4.CreateScale( glNode.Node.Scale );
+                var transform = Matrix4x4.CreateFromQuaternion( rotation ) * Matrix4x4.CreateScale( scale );
                 transform.Translation   = translation;
                 glNode.CurrentTransform = transform;
 
diff --git a/GFDLibrary.Rendering.OpenGL/GLNode.cs b/GFDLibrary.Rendering.OpenGL/GLNode.cs
index 6ad8f72..b98f7b3 100644
--- a/GFDLibrary.Rendering.OpenGL/GLNode.cs
+++ b/GFDLibrary.Rendering.OpenGL/GLNode.cs
@@ -11,6 +11,8 @@ namespace GFDLibrary.Rendering.OpenGL
         public GLNode Parent { get; set; }
         public Node Node { get; set; }
         public List<AnimationController> Controllers { get; }
+        public List<List<AnimationController>> BlendControllers { get; }
+        public List<int> BlendControllerIndices { get; }
         public Matrix4x4 CurrentTransform { get; set; }
         public Matrix4x4 WorldTransform { get; set; }
         public List<GLMesh> Meshes { get; }
@@ -22,6 +24,8 @@ namespace GFDLibrary.Rendering.OpenGL
             WorldTransform = node.WorldTransform;
             Meshes = new List<GLMesh>();
             Controllers = new List<AnimationController>();
+            BlendControllers = new List<List<AnimationController>>();
+            BlendControllerIndices = new List<int>();
         }
 
         #region IDisposable Support
@@ -53,4 +57,4 @@ namespace GFDLibrary.Rendering.OpenGL
         }
         #endregion
     }
-}
\ No newline at end of file
+}
diff --git a/GFDLibrary.Rendering.OpenGL/GLOrthographicCamera.cs b/GFDLibrary.Rendering.OpenGL/GLOrthographicCamera.cs
index 3835e28..bdcd43a 100644
--- a/GFDLibrary.Rendering.OpenGL/GLOrthographicCamera.cs
+++ b/GFDLibrary.Rendering.OpenGL/GLOrthographicCamera.cs
@@ -1,4 +1,4 @@
-﻿using OpenTK;
+﻿using OpenTK.Mathematics;
 
 namespace GFDLibrary.Rendering.OpenGL
 {
diff --git a/GFDLibrary.Rendering.OpenGL/GLPerspectiveCamera.cs b/GFDLibrary.Rendering.OpenGL/GLPerspectiveCamera.cs
index b356c83..b5da266 100644
--- a/GFDLibrary.Rendering.OpenGL/GLPerspectiveCamera.cs
+++ b/GFDLibrary.Rendering.OpenGL/GLPerspectiveCamera.cs
@@ -1,5 +1,5 @@
 ﻿using GFDLibrary.Common;
-using OpenTK;
+using OpenTK.Mathematics;
 
 namespace GFDLibrary.Rendering.OpenGL
 {
diff --git a/GFDLibrary.Rendering.OpenGL/GLShaderProgram.cs b/GFDLibrary.Rendering.OpenGL/GLShaderProgram.cs
index 22cdcb9..f8ca23c 100644
--- a/GFDLibrary.Rendering.OpenGL/GLShaderProgram.cs
+++ b/GFDLibrary.Rendering.OpenGL/GLShaderProgram.cs
@@ -2,7 +2,7 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
-using OpenTK;
+using OpenTK.Mathematics;
 using OpenTK.Graphics.OpenGL;
 
 namespace GFDLibrary.Rendering.OpenGL
diff --git a/GFDLibrary/Api/FlatApi.cs b/GFDLibrary/Api/FlatApi.cs
index 511bc54..e87322b 100644
--- a/GFDLibrary/Api/FlatApi.cs
+++ b/GFDLibrary/Api/FlatApi.cs
@@ -9,7 +9,6 @@ using System.Linq;
 using System.Numerics;
 using System.Text;
 using System.Threading.Tasks;
-using Scarlet.Platform.Sony;
 using GFDLibrary.Materials;
 using GFDLibrary.Animations;
 
diff --git a/GFDLibrary/GFDLibrary.csproj b/GFDLibrary/GFDLibrary.csproj
index dbcd9b1..ea2d93b 100644
--- a/GFDLibrary/GFDLibrary.csproj
+++ b/GFDLibrary/GFDLibrary.csproj
@@ -25,12 +25,6 @@
     <PackageReference Include="YamlDotNet" Version="15.1.2" />
   </ItemGroup>
 
-  <ItemGroup>
-    <ProjectReference Include="..\Dependencies\Scarlet\Scarlet.IO.ImageFormats\Scarlet.IO.ImageFormats.csproj" />
-    <ProjectReference Include="..\Dependencies\Scarlet\Scarlet\Scarlet.csproj" />
-    <ProjectReference Include="..\Dependencies\tga-decoder-cs\TgaDecoderTest.csproj" />
-  </ItemGroup>
-
   <ItemGroup>
     <Folder Include="Animations\Conversion\" />
   </ItemGroup>
diff --git a/GFDLibrary/ResourceVersion.cs b/GFDLibrary/ResourceVersion.cs
index 35b0863..802085b 100644
--- a/GFDLibrary/ResourceVersion.cs
+++ b/GFDLibrary/ResourceVersion.cs
@@ -1,6 +1,4 @@
-﻿using Scarlet.IO.ImageFormats;
-
-namespace GFDLibrary
+﻿namespace GFDLibrary
 {
     public static class ResourceVersion
     {
@@ -24,4 +22,4 @@ namespace GFDLibrary
             return version >= 0x02000000;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/GFDLibrary/Textures/TextureDecoder.cs b/GFDLibrary/Textures/TextureDecoder.cs
index e8e2792..ad54b7e 100644
--- a/GFDLibrary/Textures/TextureDecoder.cs
+++ b/GFDLibrary/Textures/TextureDecoder.cs
@@ -189,14 +189,6 @@ namespace GFDLibrary.Textures
                 case TextureFormat.DDS:
                 case TextureFormat.EPT:
                     return DecodeDDS( data );
-                case TextureFormat.TMX:
-                    return DecodeTMX( data );
-                case TextureFormat.TGA:
-                    return DecodeTGA( data );
-                case TextureFormat.GXT:
-                    return DecodeGXT( data );
-                case TextureFormat.GNF:
-                    return DecodeGNF(data);
                 default:
                     throw new NotSupportedException();
             }
@@ -290,28 +282,5 @@ namespace GFDLibrary.Textures
             // load the saved bmp into a new bitmap
             return new Bitmap( bitmapStream );
         }
-
-        private static Bitmap DecodeTMX( byte[] data )
-        {
-            var tmx = new Scarlet.IO.ImageFormats.TMX();
-            tmx.Open( new MemoryStream( data ), Scarlet.IO.Endian.LittleEndian );
-            return tmx.GetBitmap();
-        }
-        private static Bitmap DecodeTGA( byte[] data )
-        {
-            return TgaDecoderTest.TgaDecoder.FromBinary( data );
-        }
-        private static Bitmap DecodeGXT( byte[] data )
-        {
-            var gxt = new Scarlet.IO.ImageFormats.GXT();
-            gxt.Open( new MemoryStream( data ), Scarlet.IO.Endian.LittleEndian );
-            return gxt.GetBitmap();
-        }
-        private static Bitmap DecodeGNF(byte[] data)
-        {
-            var gnf = new Scarlet.IO.ImageFormats.GNF();
-            gnf.Open(new MemoryStream(data), Scarlet.IO.Endian.LittleEndian);
-            return gnf.GetBitmap();
-        }
     }
 }
